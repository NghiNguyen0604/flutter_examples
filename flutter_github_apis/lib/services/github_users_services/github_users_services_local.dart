// ignore_for_file: public_member_api_docs

/*
 * Autogenerated header by File Header Comment extension - Donna Iwan
 * File:       github_users_services_local.dart
 * Created on: Fri Jul 08 2022
 * Author:     Nguyen Huu Nghi
 *
 * Copyright (c) 2022 Nguyen Huu Nghi
 *
 * Description : Stored data in local.
 */
import 'package:sembast/sembast.dart';

import '../../model/github_user.dart';
import '../../utils/utilities.dart';
import '../local_database_services/sembast_database.dart';
import 'github_users_services_files.dart';

class GitHubUsersServicesLocal extends GitHubUsersServices {
  GitHubUsersServicesLocal({
    required this.dataStore,
  });
  final SembastDataStore dataStore;
  final ref_ = StoreRef(SembastDataStore.usersStore);
  @override
  Future<List<GitHubUser>> getAllUsers() async {
    Utils.log(title: 'REFRESH', info: 'Get users from local.');

    final records = await ref_.find(dataStore.db);
    return List.generate(
      records.length,
      (index) => GitHubUser.fromMap(
        Map<String, dynamic>.from(
          records[index].value as Map<dynamic, dynamic>,
        ),
      ),
    )..sort((a, b) => (a.id ?? 0).compareTo(b.id ?? 0));
  }

  @override
  Future<GitHubUser?> getUserInfo(String login) async {
    final record = GitHubUser.fromMap(
      Map<String, dynamic>.from(
        await ref_.record(login).get(dataStore.db) as Map<dynamic, dynamic>,
      ),
    );
    return record;
  }

  @override
  Future<void> saveAllUsers({required List<GitHubUser> users}) async {
    Utils.log(title: 'USERS', info: 'Save users data to local.');

    for (final mUser in users) {
      await ref_.record(mUser.login).put(
            dataStore.db,
            mUser.toMap(),
            merge: true,
          );
    }
  }

  @override
  Future<void> saveUser({required GitHubUser user}) async {
    Utils.log(title: 'USERS', info: 'Save user data to local.');

    await ref_.record(user.login).update(dataStore.db, user.toMap());
  }

  @override
  Future<Map<String, dynamic>> getAllUsersRecords({bool forceRefresh = false}) {
    // No need to use in local.
    throw UnimplementedError();
  }

  @override
  Future<Map<String, dynamic>> getUserInfoRecords({
    required GitHubUser user,
    bool forceRefresh = false,
  }) {
    // No need to use in local.

    throw UnimplementedError();
  }

  @override
  int checkUsersBuffer() {
    // TODO: implement checkUsersBuffer
    throw UnimplementedError();
  }
}
