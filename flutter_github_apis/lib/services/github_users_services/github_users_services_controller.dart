// ignore_for_file: public_member_api_docs, no_leading_underscores_for_local_identifiers
/*
 * Autogenerated header by File Header Comment extension - Donna Iwan
 * File:       github_users_services_controller.dart
 * Created on: Fri Jul 08 2022
 * Author:     Nguyen Huu Nghi
 *
 * Copyright (c) 2022 Nguyen Huu Nghi
 *
 * Description 
 */

import '../../model/github_user.dart';
import '../../utils/utilities.dart';
import 'github_users_services.dart';

class GitHubUsersServicesController {
  GitHubUsersServicesController({
    required this.remote,
    required this.local,
  });
  final GitHubUsersServices remote;
  final GitHubUsersServices local;

  Future<List<GitHubUser>> getAllUsersRecords({
    bool forceRefresh = false,
    bool offline = false,
  }) async {
    if (!offline) {
      final length = remote.checkUsersBuffer();
      if (length == 0) {
        Utils.log(title: 'USERS', info: 'Fetch users data from local');
        final localUsers = await local.getAllUsers();
        if (localUsers.isNotEmpty) {
          remote.saveAllUsers(users: localUsers);
          final records = await remote.getAllUsersRecords(forceRefresh: true);
          return records['data'] as List<GitHubUser>;
        } else {
          final records =
              await remote.getAllUsersRecords(forceRefresh: forceRefresh);
          if (!(records['cache'] as bool)) {
            local.saveAllUsers(users: records['data'] as List<GitHubUser>);
          }

          return records['data'] as List<GitHubUser>;
        }
      } else {
        final records =
            await remote.getAllUsersRecords(forceRefresh: forceRefresh);
        if (!(records['cache'] as bool)) {
          local.saveAllUsers(users: records['data'] as List<GitHubUser>);
        }

        return records['data'] as List<GitHubUser>;
      }
    } else {
      return local.getAllUsers();
    }
  }

  Future<GitHubUser?> getUserInfoRecords({
    required GitHubUser user,
    bool forceRefresh = false,
    bool offline = false,
  }) async {
    if (!offline) {
      final records = await remote.getUserInfoRecords(
        user: user,
        forceRefresh: forceRefresh,
      );
      final _user = records['data'] as GitHubUser;
      if (!(records['cache'] as bool)) {
        local.saveUser(user: _user);
      }
      return _user;
    } else {
      return local.getUserInfo(user.login ?? '');
    }
  }
}
