/*
 * Autogenerated header by File Header Comment extension - Donna Iwan
 * File:       mqtt_view.dart
 * Created on: Mon Jul 11 2022
 * Author:     Nguyen Huu Nghi
 *
 * Copyright (c) 2022 Nguyen Huu Nghi
 *
 * Description 
 */
import 'dart:io' show Platform;
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

import '../mqtt/mqtt_files.dart';
import '../widgets/custom_textfield.dart';

class MQTTView extends ConsumerStatefulWidget {
  const MQTTView({Key? key}) : super(key: key);

  @override
  ConsumerState<MQTTView> createState() {
    return _MQTTViewState();
  }
}

class _MQTTViewState extends ConsumerState<MQTTView> {
  final TextEditingController _hostTextController = TextEditingController();
  final TextEditingController _messageTextController = TextEditingController();
  final TextEditingController _topicTextController = TextEditingController();
  late MQTTAppState currentAppState;
  late MQTTManager manager;

  @override
  void initState() {
    super.initState();
    _hostTextController.text =
        '6e452864f4104bcaa81787605b1cf278.s2.eu.hivemq.cloud';
    _topicTextController.text = 'global';
  }

  @override
  void dispose() {
    _hostTextController.dispose();
    _messageTextController.dispose();
    _topicTextController.dispose();
    manager.disconnect();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final MQTTAppState appState = ref.watch(mqttAppStateProvider);
    // Keep a reference to the app state.
    currentAppState = appState;
    return Scaffold(
      appBar: AppBar(
        title: const Text('MQTT'),
        backgroundColor: Colors.greenAccent,
      ),
      body: SingleChildScrollView(
        child: Column(
          children: <Widget>[
            //NOTE status snackbar
            Row(
              children: <Widget>[
                Expanded(
                  child: Container(
                      color: Colors.deepOrangeAccent,
                      child: Text(
                          currentAppState.getAppConnectionState.description,
                          textAlign: TextAlign.center)),
                ),
              ],
            ),
            //NOTE edit property
            _buildEditableColumn(),
            const SizedBox(height: 10),
            //NOTE send msg
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: <Widget>[
                Expanded(
                  child: CustomTextField(
                    controller: _messageTextController,
                    enable: currentAppState.getAppConnectionState ==
                        MQTTAppConnectionState.connected,
                    hint: 'Enter a message',
                  ),
                ),
                _buildSendButtonFrom(currentAppState.getAppConnectionState)
              ],
            ),
            const SizedBox(height: 10),

            //NOTE actions
            Row(
              children: <Widget>[
                Expanded(
                  child: IgnorePointer(
                    ignoring: currentAppState.getAppConnectionState ==
                        MQTTAppConnectionState.connected,
                    child: TextButton(
                      style: ButtonStyle(
                        backgroundColor: currentAppState
                                    .getAppConnectionState ==
                                MQTTAppConnectionState.connected
                            ? MaterialStateProperty.all(Colors.grey)
                            : MaterialStateProperty.all(Colors.lightBlueAccent),
                      ),
                      onPressed: currentAppState.getAppConnectionState ==
                              MQTTAppConnectionState.disconnected
                          ? _configureAndConnect
                          : null,
                      child: const Text(
                        'Connect',
                        style: TextStyle(color: Colors.black),
                      ), //
                    ),
                  ),
                ),
                const SizedBox(width: 10),
                Expanded(
                  child: IgnorePointer(
                    ignoring: currentAppState.getAppConnectionState ==
                        MQTTAppConnectionState.disconnected,
                    child: TextButton(
                      style: ButtonStyle(
                        backgroundColor:
                            currentAppState.getAppConnectionState ==
                                    MQTTAppConnectionState.disconnected
                                ? MaterialStateProperty.all(Colors.grey)
                                : MaterialStateProperty.all(Colors.red),
                      ),
                      onPressed: currentAppState.getAppConnectionState ==
                              MQTTAppConnectionState.connected
                          ? _disconnect
                          : null,
                      child: const Text(
                        'Disconnect',
                        style: TextStyle(color: Colors.black),
                      ), //
                    ),
                  ),
                ),
              ],
            ),
            _buildScrollableTextWith(currentAppState.getHistoryText)
          ],
        ),
      ),
    );
  }

  Widget _buildEditableColumn() {
    return Padding(
      padding: const EdgeInsets.all(20.0),
      child: Column(
        children: <Widget>[
          CustomTextField(
            controller: _hostTextController,
            enable: currentAppState.getAppConnectionState ==
                MQTTAppConnectionState.disconnected,
            hint: 'Enter broker address',
          ),
          const SizedBox(height: 10),
          CustomTextField(
            controller: _topicTextController,
            enable: currentAppState.getAppConnectionState ==
                MQTTAppConnectionState.disconnected,
            hint: 'Enter a topic to subscribe or listen',
          ),
        ],
      ),
    );
  }

  Widget _buildScrollableTextWith(String text) {
    return Padding(
      padding: const EdgeInsets.all(20.0),
      child: SizedBox(
        width: 400,
        height: 200,
        child: SingleChildScrollView(
          child: Text(text),
        ),
      ),
    );
  }

  Widget _buildSendButtonFrom(MQTTAppConnectionState state) {
    // ignore: deprecated_member_use
    return TextButton(
      style: ButtonStyle(
          backgroundColor: state == MQTTAppConnectionState.connected
              ? MaterialStateProperty.all(Colors.green)
              : MaterialStateProperty.all(Colors.grey)),
      onPressed: state == MQTTAppConnectionState.connected
          ? () {
              _publishMessage(_messageTextController.text);
            }
          : null,
      child: const Text('Send'), //
    );
  }

  void _configureAndConnect() {
    // ignore: flutter_style_todos
    final osPrefix = (Platform.isAndroid) ? 'Flutter_Android' : 'Flutter_iOS';

    manager = MQTTManager(
        host: _hostTextController.text,
        topic: _topicTextController.text,
        identifier: osPrefix,
        state: currentAppState);
    manager.initializeMQTTClient();
    manager.connect();
  }

  void _disconnect() {
    manager.disconnect();
  }

  void _publishMessage(String text) {
    String osPrefix = 'Flutter_iOS';
    if (Platform.isAndroid) {
      osPrefix = 'Flutter_Android';
    }
    final String message = '$osPrefix says: $text';
    manager.publish(message);
    _messageTextController.clear();
  }
}
